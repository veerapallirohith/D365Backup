/// <summary>
///  name space used for data library
/// </summary>

using System.IO;
using OfficeOpenXml;
using OfficeOpenXml.ExcelPackage;
using OfficeOpenXml.ExcelRange;

/// <summary>
///  STE_TaxDeductionRateUpdate class used for import data from Excel
/// </summary>


internal final class STE_VendorInvoiceTemplateUploader
{
    /// <summary>
    /// Run call to inportdata method
    /// </summary>
    public void run()
    {
        this.importData();
    }

    /// <summary>
    /// importData method used for insert data in Retail infocode table specific
    /// </summary>
    void importData()
    {
        System.IO.Stream                        stream;
        DialogGroup                             dlgUploadGroup;
        FileUploadBuild                         fileUploadBuild;
        FormBuildControl                        formBuildControl;
        STE_VendInvoiceTemplate                 vendInvoiceTemplate, vendInvoiceTemplateLoc;
        STE_VendInvoiceDistributionTemplate     vendInvoiceDistributionTemplateInsert, vendInvoiceDistributionTemplateLoc;
        STE_VendInvoiceLineTemplate             vendInvoiceLineTemplate, vendInvoiceLineTemplateLoc;
        RecId                                   LedgerDimension;
        MainAccount                             mainAccount;

        Dialog           dialog =    new Dialog("@Stephanus:STE_interCompany_VendorUpload");

        dlgUploadGroup          = dialog.addGroup("@Stephanus:STE_interCompany_Template");
        formBuildControl        = dialog.formBuildDesign().control(dlgUploadGroup.name());
        fileUploadBuild         = formBuildControl.addControlEx(classstr(FileUpload), 'Upload');

        fileUploadBuild.style(FileUploadStyle::MinimalWithFilename);
        fileUploadBuild.fileTypesAccepted('.xlsx');
                
        if (dialog.run() && dialog.closedOk())
        {
            FileUpload fileUploadControl     = dialog.formRun().control(dialog.formRun().controlId('Upload'));
            FileUploadTemporaryStorageResult fileUploadResult = fileUploadControl.getFileUploadResult();

            if(fileUploadResult != null && fileUploadResult.getUploadStatus())
            {
                stream = fileUploadResult.openResult();
                using (ExcelPackage Package = new ExcelPackage(stream))
                {
                    int rowCount, i,columncount;

                    Package.Load(stream);
                    ExcelWorksheet worksheet           = package.get_Workbook().get_Worksheets().get_Item(1);
                    OfficeOpenXml.ExcelRange range     = worksheet.Cells;

                    rowCount           = (worksheet.Dimension.End.Row) - (worksheet.Dimension.Start.Row)  + 1;
                    columncount        = (worksheet.Dimension.End.Column);

                    for (i = 1; i<= rowCount; i++)
                    {
                        if(i == 1)
                        {
                            continue;
                        }
                        ttsbegin;
                        vendInvoiceTemplate.TemplateName        = (range.get_Item(i,1).Value);
                        vendInvoiceTemplateLoc = STE_VendInvoiceTemplate::findByTemplateName(vendInvoiceTemplate.TemplateName);
                        if(!vendInvoiceTemplateLoc)
                        {
                            vendInvoiceTemplate.TemplateDescription = (range.get_Item(i,2).Value);
                            vendInvoiceTemplate.DefaultDimension    = this.createDefaultDimension(range.get_Item(i,3).Value,range.get_Item(i,4).value,range.get_Item(i,5).value,range.get_Item(i,6).value,range.get_Item(i,7).value,
                                                                       range.get_Item(i,8).value,range.get_Item(i,9).value,range.get_Item(i,10).value,range.get_Item(i,11).value,range.get_Item(i,12).value,range.get_Item(i,13).value,range.get_Item(i,14).value);
                            vendInvoiceTemplate.insert();
                            Info("@Stephanus:STE_interCompany_RecordInsert");
                        }
                        
                        mainAccount           = MainAccount::findByMainAccountId(range.get_Item(i,16).Value);
                        LedgerDimension       = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(mainAccount.MainAccountId,LedgerJournalACType::Ledger);
                       
                        select firstonly vendInvoiceLineTemplateLoc
                                     where vendInvoiceLineTemplateLoc.LedgerDimension    == LedgerDimension
                                    &&    vendInvoiceLineTemplateLoc.VendInvoiceTemplate == vendInvoiceTemplate.RecId;
                        
                        if(!vendInvoiceLineTemplateLoc)
                        {   
                            vendInvoiceLineTemplate.VendInvoiceTemplate           = vendInvoiceTemplate.RecId;
                            vendInvoiceLineTemplate.Description                   = (range.get_Item(i,15).Value);
                            vendInvoiceLineTemplate.TaxGroup                      = (range.get_Item(i,17).Value);
                            vendInvoiceLineTemplate.TaxItemGroup                  = (range.get_Item(i,18).Value);
                            vendInvoiceLineTemplate.Quantity                      = (range.get_Item(i,19).Value);
                            vendInvoiceLineTemplate.UnitPrice                     = (range.get_Item(i,20).Value);
                            vendInvoiceLineTemplate.AmountCur                     = (range.get_Item(i,21).value);
                            vendInvoiceLineTemplate.LedgerDimension               = LedgerDynamicAccountHelper::getDynamicAccountFromAccountNumber(mainAccount.MainAccountId,LedgerJournalACType::Ledger);
                            vendInvoiceLineTemplate.insert();
                            
                            delete_from vendInvoiceDistributionTemplateLoc
                                where vendInvoiceDistributionTemplateLoc.VendInvoiceLineTemplate == vendInvoiceLineTemplate.RecId;
                        }
                       
                        vendInvoiceDistributionTemplateInsert.LedgerDimension = LedgerDimensionFacade::serviceCreateLedgerDimension(vendInvoiceLineTemplate.LedgerDimension,vendInvoiceTemplate.DefaultDimension);
                        vendInvoiceDistributionTemplateInsert.Percentage              = (range.get_Item(i,35).value);
                        vendInvoiceDistributionTemplateInsert.AmountCur               = (range.get_Item(i,36).value);
                        vendInvoiceDistributionTemplateInsert.VendInvoiceLineTemplate = vendInvoiceLineTemplate.RecId;
                        vendInvoiceDistributionTemplateInsert.insert();
                        ttscommit;
                        vendInvoiceDistributionTemplateInsert =null;
                    }

                }
            }
        }
    }

    /// <summary>
    /// For Create Default Dimension
    /// </summary>
    /// <param name = "_Dim2">str</param>
    /// <param name = "_Dim3">str</param>
    /// <param name = "_Dim4">str</param>
    /// <param name = "_Dim5">str</param>
    /// <param name = "_Dim6">str</param>
    /// <param name = "_Dim7">str</param>
    /// <param name = "_Dim8">str</param>
    /// <param name = "_Dim9">str</param>
    /// <param name = "_Dim10">str</param>
    /// <param name = "_Dim11">str</param>
    /// <param name = "_Dim12">str</param>
    /// <param name = "_Dim13">str</param>
    /// <returns>DimensionDefault</returns>
    public DimensionDefault createDefaultDimension(str _Dim2, str _Dim3, str _Dim4,str _Dim5,str _Dim6,str _Dim7,str _Dim8,str _Dim9,str _Dim10,str _Dim11,str _Dim12,str _Dim13)
    {
        DimensionAttributeValueSetStorage   valueSetStorage = new DimensionAttributeValueSetStorage();
        DimensionDefault                    result;
        int                     i;
        DimensionAttribute      dimensionAttribute;
        DimensionAttributeValue dimensionAttributeValue;

        str Dim2 = 'F02_KST';
        str Dim3 = 'F03_Kostentraeger_Projekte';
        str Dim4 = 'F04_Rueckstellungsart_Rueckstellungsbewegung';
        str Dim5 = 'F05_Leistungen';
        str Dim6 = 'F06_StellenartUndCharakteristik';
        str Dim7 = 'F07_Lohnarten';
        str Dim8 = 'F08_KlientID';
        str Dim9 = 'F09_Geschaeftsbereich';
        str Dim10 = 'F10_Region';
        str Dim11 = 'F11_Einrichtung';
        str Dim12 = 'F12_Angebot';
        str Dim13 = 'F13_Gruppe';


    
        //Change the dimension names. Use the dimension name which are open and active in the system
        //I have given Region, Purpose and Costcentre just for an example
    
        container               conAttr = [Dim2,Dim3,Dim4,Dim5,Dim6,Dim7,Dim8,Dim9,Dim10,Dim11,Dim12,Dim13];
    
        container               conValue = [_Dim2,_Dim3,_Dim4,_Dim5,_Dim6,_Dim7,_Dim8,_Dim9,_Dim10,_Dim11,_Dim12,_Dim13];
    
        str                     dimValue;
    
        for (i = 1; i <= conLen(conAttr); i++)
        {
            dimensionAttribute = dimensionAttribute::findByName(conPeek(conAttr,i));
            if (dimensionAttribute.RecId == 0)
            {
                continue;
            }
            dimValue = conPeek(conValue,i);
            if (dimValue != "@Stephanus:STE_interCompany_Quotes")
            {
                dimensionAttributeValue = dimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,dimValue,false,true);
                valueSetStorage.addItem(dimensionAttributeValue);
            }
        }
    
        result = valueSetStorage.save();
        //It reutrns the value of type DimensionDefault
        return result;
    }

    /// <summary>
    /// For GenerateledgerDimension Method.
    /// </summary>
    /// <param name = "_mainAccountId">MainAccountNum</param>
    /// <param name = "_Dim2">str</param>
    /// <param name = "_Dim3">str</param>
    /// <param name = "_Dim4">str</param>
    /// <param name = "_Dim5">str</param>
    /// <param name = "_Dim6">str</param>
    /// <param name = "_Dim7">str</param>
    /// <param name = "_Dim8">str</param>
    /// <param name = "_Dim9">str</param>
    /// <param name = "_Dim10">str</param>
    /// <param name = "_Dim11">str</param>
    /// <param name = "_Dim12">str</param>
    /// <param name = "_Dim13">str</param>
    /// <returns>DimensionDynamicAccount</returns>
    public DimensionDynamicAccount   generateLedgerDimension(MainAccountNum  _mainAccountId ,str _Dim2, str _Dim3, str _Dim4,str _Dim5,str _Dim6,str _Dim7,str _Dim8,str _Dim9,str _Dim10,str _Dim11,str _Dim12,str _Dim13)
    {
        int                                 hierarchyCount;
        int                                 hierarchyIdx;
        LedgerRecId                         ledgerRecId;
        MainAccount                         mainAccount;
        RefRecId                            recordvalue;
        DimensionAttribute                  dimensionAttribute;
        DimensionAttributeValue             dimensionAttributeValue;
        DimensionSetSegmentName             dimensionSet;
        DimensionStorage                    dimStorage;
        dimensionAttributeValueCombination  dimensionAttributeValueCombination;
        int                                 i = 1;

        container                           conData;
        DimensionAttributeValueContract     ValueContract;
        LedgerAccountContract               LedgerAccountContract;
        List                                valueContracts;

 

        #define.MainAccount('MainAccount')
        str Dim2 = 'F02_KST';
        str Dim3 = 'F03_Kostentraeger_Projekte';
        str Dim4 = 'F04_Rueckstellungsart_Rueckstellungsbewegung';
        str Dim5 = 'F05_Leistungen';
        str Dim6 = 'F06_StellenartUndCharakteristik';
        str Dim7 = 'F07_Lohnarten';
        str Dim8 = 'F08_KlientID';
        str Dim9 = 'F09_Geschaeftsbereich';
        str Dim10 = 'F10_Region';
        str Dim11 = 'F11_Einrichtung';
        str Dim12 = 'F12_Angebot';
        str Dim13 = 'F13_Gruppe';
 

        LedgerAccountContract   = new LedgerAccountContract();
        valueContracts           = new List(Types::Class);

 

        conData =[_mainAccountId];

 

        mainAccount = MainAccount::findByMainAccountId(_mainAccountId);
        recordvalue = DimensionHierarchy::getAccountStructure(mainAccount.RecId,Ledger::current());
        hierarchyCount = DimensionHierarchy::getLevelCount(recordvalue);
        DimensionSet = DimensionHierarchyLevel::getDimensionHierarchyLevelNames(recordvalue);

 

        if (recordvalue)
        {
            for(hierarchyIdx = 1 ; hierarchyIdx <= hierarchyCount ; hierarchyIdx++)
            {
                if(hierarchyIdx == 1 && i == 1)
                {
                    continue;
                }
                dimensionAttribute = DimensionAttribute::findByLocalizedName(DimensionSet[hierarchyIdx],false,"@Stephanus:STE_interCompany_en");
                if (dimensionAttribute.Name == Dim2) //&& hierarchyIdx == 2)
                {
                    conData += [_Dim2];
                }
                if (dimensionAttribute.Name == Dim3) //&& hierarchyIdx == 3)
                {
                    conData += [_Dim3];
                }
                if (dimensionAttribute.Name == Dim4) //&& hierarchyIdx == 4)
                {
                    conData += [_Dim4];
                }
                if (dimensionAttribute.Name == Dim5) //&& hierarchyIdx == 5)
                {
                    conData += [_Dim5];
                }
                if (dimensionAttribute.Name == Dim6) //&& hierarchyIdx == 6)
                {
                    conData += [_Dim6];
                }
                if (dimensionAttribute.Name == Dim7) //&& hierarchyIdx == 7)
                {
                    conData += [_Dim7];
                }
                if (dimensionAttribute.Name == Dim8) //&& hierarchyIdx == 8)
                {
                    conData += [_Dim8];
                }
                if (dimensionAttribute.Name == Dim9) //&& hierarchyIdx == 9)
                {
                    conData += [_Dim9];
                }
                if (dimensionAttribute.Name == Dim10) //&& hierarchyIdx == 9)
                {
                    conData += [_Dim10];
                }
                if (dimensionAttribute.Name == Dim11) //&& hierarchyIdx == 9)
                {
                    conData += [_Dim11];
                }
                if (dimensionAttribute.Name == Dim12) //&& hierarchyIdx == 9)
                {
                    conData += [_Dim12];
                }
                if (dimensionAttribute.Name == Dim13) //&& hierarchyIdx == 9)
                {
                    conData += [_Dim13];
                }

                if(dimensionAttribute)
                {
                //Pending Needs to Be Compeleted.
                //if(dimensionAttribute.Name == Dim2 || dimensionAttribute.Name == Dim3)
                //{
                    //i++;
                    //if (dimensionAttribute.Name == Dim2 && conPeek(conData,i) == "" || dimensionAttribute.Name == Dim3 && conPeek(conData,i) == "")
                    //    continue;

 

                    dimensionAttributeValue = DimensionAttributeValue::findByDimensionAttributeAndValue(dimensionAttribute,conPeek(conData,i),true,true);

 

                    if(dimensionAttributeValue)
                    {

 

                        ValueContract = new DimensionAttributeValueContract();
                        ValueContract.parmName(dimensionAttribute.Name) ;
                        ValueContract.parmValue(dimensionAttributeValue.CachedDisplayValue);
                        valueContracts.addEnd(ValueContract);
                    }
                }

 

            }

            LedgerAccountContract.parmMainAccount(_mainAccountId);
            LedgerAccountContract.parmValues(valueContracts);

            dimStorage = DimensionServiceProvider::buildDimensionStorageForLedgerAccount(LedgerAccountContract);
            dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(dimStorage.save());
            ledgerRecId = dimensionAttributeValueCombination.RecId;
        }
        return ledgerRecId;
    }

    /// <summary>
    /// For Generate Ledger Dimension using Account
    /// </summary>
    /// <param name = "_mainAccountId">MainAccountNum</param>
    /// <returns>DimensionAttributeValueCombination</returns>
    public DimensionAttributeValueCombination generateLedgerDimensionUsingAccount(MainAccountNum  _mainAccountId)
    {
        LedgerAccountContract               LedgerAccountContract = new LedgerAccountContract();
        DimensionStorage                    dimStorage;
        DimensionAttributeValueCombination  dimensionAttributeValueCombination;

        LedgerAccountContract.parmMainAccount(_mainAccountId);

        dimStorage = DimensionServiceProvider::buildDimensionStorageForLedgerAccount(LedgerAccountContract,true);


        dimensionAttributeValueCombination = DimensionAttributeValueCombination::find(dimStorage.save());

        return dimensionAttributeValueCombination;
    }

    /// <summary>
    /// create object for STE_TaxDeductionRateUpdate class and used for data import
    /// </summary>
    /// <param name = "args">Call the args </param>
    public static void main (Args args)
    {

        STE_VendorInvoiceTemplateUploader     vendorInvoiceTemplateUploader = new STE_VendorInvoiceTemplateUploader();

        vendorInvoiceTemplateUploader.run();

    }

}